/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?

SELECT 	customer_id,				
		CONCAT ('$', sum(price)) AS total_amount
FROM 	dannys_diner.menu
INNER JOIN dannys_diner.sales ON menu.product_id = sales.product_id
GROUP BY customer_id
ORDER BY customer_id;

-- 2. How many days has each customer visited the restaurant?

SELECT 	customer_id,
		COUNT(DISTINCT order_date) AS days_visited
FROM dannys_diner.sales
GROUP BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

SELECT 	customer_id, product_name

FROM
(SELECT customer_id,
	order_date,
	product_name,
	DENSE RANK () OVER (PARTITION BY s.customer_id
			    ORDER BY s.order_date) AS item_rank
	FROM dannys_diner.sales AS s
	JOIN dannys_diner.menu AS m ON s.product_id = m.product_id) AS first_time
	
WHERE item_rank=1
ORDER BY customer_id, product_name;
		
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT 	product_name AS most_purchased_item,
		COUNT(sales.product_id) AS order_count
        
FROM dannys_diner.menu
		JOIN dannys_diner.sales ON menu.product_id = sales.product_id
GROUP BY product_name
ORDER BY order_count DESC
     LIMIT 1;

-- 5. Which item was the most popular for each customer?

SELECT customer_id, product_name, order_count

FROM 
	(SELECT customer_id,
     		product_name,
     		COUNT(product_name) AS order_count,
     		RANK () OVER(PARTITION BY customer_id ORDER BY COUNT(product_name) DESC) AS rank_num
     FROM dannys_diner.menu
     INNER JOIN dannys_diner.sales ON menu.product_id = sales.product_id
     GROUP BY customer_id, product_name) AS order_info
       
WHERE rank_num=1;

-- 6. Which item was purchased first by the customer after they became a member?

SELECT 	customer_id,
	product_name
        
FROM 
		(SELECT sales.customer_id,
         		sales.order_date,
         		sales.product_id,
         		DENSE_RANK () OVER (PARTITION BY sales.customer_id ORDER BY sales.order_date) AS order_date_rank
         
         FROM dannys_diner.sales
         JOIN dannys_diner.members ON sales.customer_id = members.customer_id
         WHERE sales.order_date >= members.join_date) AS member_rank_table
         
	JOIN dannys_diner.menu ON member_rank_table.product_id = menu.product_id
    	WHERE order_date_rank = 1
    	ORDER BY customer_id;

-- 7. Which item was purchased just before the customer became a member?

SELECT 	customer_id,
	product_name
        
FROM 
		(SELECT sales.customer_id,
         		sales.order_date,
         		sales.product_id,
         		DENSE_RANK () OVER (PARTITION BY sales.customer_id ORDER BY sales.order_date DESC) AS order_date_rank
         
         FROM dannys_diner.sales
         JOIN dannys_diner.members ON sales.customer_id = members.customer_id
         WHERE sales.order_date < members.join_date) AS member_rank_table
         
	JOIN dannys_diner.menu ON member_rank_table.product_id = menu.product_id
    	WHERE order_date_rank = 1
    	ORDER BY customer_id;

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT 	sales.customer_id,
	COUNT (menu.product_id) AS total_item,
        SUM (menu.price) AS total_amount
        
FROM dannys_diner.sales
INNER JOIN dannys_diner.menu ON sales.product_id = menu.product_id
INNER JOIN dannys_diner.members ON members.customer_id = sales.customer_id
WHERE sales.order_date < members.join_date
GROUP BY sales.customer_id
ORDER BY sales.customer_id;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT 	customer_id,
	SUM ( CASE 	WHEN product_name = 'sushi' 
             		THEN 20*price 
             		ELSE 10*price END) AS total_point
                    
FROM dannys_diner.sales
JOIN dannys_diner.menu ON sales.product_id = menu.product_id
GROUP BY customer_id
ORDER BY customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT 	sales.customer_id,
	SUM (CASE 	
             	WHEN (sales.order_date >= members.join_date) AND (sales.order_date < members.join_date+7) THEN 20*menu.price
             
             	WHEN menu.product_name = 'sushi' THEN 20*menu.price
             	ELSE 10*menu.price
             END) AS total_points
             
FROM dannys_diner.sales
JOIN dannys_diner.menu ON sales.product_id = menu.product_id
JOIN dannys_diner.members ON sales.customer_id = members.customer_id
GROUP BY sales.customer_id
ORDER BY sales.customer_id;
